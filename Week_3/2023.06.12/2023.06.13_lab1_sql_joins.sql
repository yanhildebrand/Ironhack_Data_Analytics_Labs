use sakila;

select amount, return_date from payment
join rental on rental.rental_id = payment.rental_id;

select amount, return_date from payment
join rental using (rental_id);

#1. List the number of films per category.
select count(film.title), category.name from film 
join film_category using (film_id)
join category using (category_id)
group by category.name;

/*
select * from film;
select * from film_category;
select * from category;
*/

#2. Retrieve the store ID, city, and country for each store.
select store.store_id, city.city, country.country from store 
join address using (address_id)
join city using (city_id)
join country using (country_id);

#3. Calculate the total revenue generated by each store in dollars.
select sum(payment.amount) from store 
join staff using (store_id)
join payment using (staff_id);

#4. Determine the average running time of films for each category.
select avg(film.length) as "average_film_length", category.name as "category_name" from film 
join film_category using (film_id)
join category using (category_id)
group by category.name;

#5. Identify the film categories with the longest average running time.
select avg(film.length) as "average_film_length", category.name as "category_name" from film 
join film_category using (film_id)
join category using (category_id)
group by category.name
order by avg(film.length) desc
limit 6;

#6. Display the top 10 most frequently rented movies in descending order.
select film.title from film 
join inventory using (film_id)
join rental using (inventory_id)
group by film.title
order by count(rental.rental_id) desc
limit 10;

#7. Determine if "Academy Dinosaur" can be rented from Store 1.
select film.title, store_id from film
join inventory using (film_id)
join store using (store_id)
where film.title in ("Academy Dinosaur");
